{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HATFIELDAE20\\\\IdeaProjects\\\\comp350sprint2\\\\src\\\\pages\\\\Home.js\";\nimport React, { Component } from \"react\";\nimport Todos from \"../component/todos\";\nimport AddTodo from \"../component/AddTodo\";\nimport \"../pages/Home.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Home extends Component {\n  // Create a default state of this component with an empty list of todos.\n  constructor() {\n    super();\n\n    this.deleteTodo = id => {\n      // Within this function, the item's id is being utilized in order to filter it out from the todo list\n      // and then updates the state with a new list\n      const todos = this.state.todos.filter(todo => {\n        return todo.id !== id;\n      });\n      this.setState({\n        todos: todos\n      });\n    };\n\n    this.addTodo = todo => {\n      const exists = this.state.todos.find(t => t.content === todo.content);\n\n      if (exists) {\n        return;\n      }\n\n      let new_list;\n\n      if (todo.date === null || todo.date === \"invalid date\") {\n        return;\n      } else {\n        todo.id = Math.random(); // Create a array that contains the current array and the new todo item\n\n        new_list = [...this.state.todos, todo];\n      } // In React, keys or ids in a list help identify which items have changed, been added or removed. Keys\n      // should not share duplicate values.\n      // To avoid having dup values, we use the Math.random() function to generate a random value for a todo id.\n      // This solution works for a small application but a more complex hashing function should be used when\n      // dealing with a larger data sensitive project.\n      // Update the local state with the new array.\n\n\n      this.setState({\n        todos: new_list\n      });\n    };\n\n    this.state = {\n      todos: []\n    };\n  } // the deleteTodo function simply creates a new array that removes the todo item selected from the user from the list\n  // and then updates the state with the new list.\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Home\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Todo's \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddTodo, {\n        addTodo: this.addTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Todos, {\n        todos: this.state.todos,\n        deleteTodo: this.deleteTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"names":["React","Component","Todos","AddTodo","Home","constructor","deleteTodo","id","todos","state","filter","todo","setState","addTodo","exists","find","t","content","new_list","date","Math","random","render"],"sources":["C:/Users/HATFIELDAE20/IdeaProjects/comp350sprint2/src/pages/Home.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport Todos from \"../component/todos\";\r\nimport AddTodo from \"../component/AddTodo\";\r\nimport \"../pages/Home.css\";\r\n\r\nclass Home extends Component {\r\n  // Create a default state of this component with an empty list of todos.\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      todos: [],\r\n    };\r\n  }\r\n\r\n  // the deleteTodo function simply creates a new array that removes the todo item selected from the user from the list\r\n  // and then updates the state with the new list.\r\n  deleteTodo = (id) => {\r\n    // Within this function, the item's id is being utilized in order to filter it out from the todo list\r\n    // and then updates the state with a new list\r\n    const todos = this.state.todos.filter((todo) => {\r\n      return todo.id !== id;\r\n    });\r\n    this.setState({\r\n      todos: todos,\r\n    });\r\n  };\r\n\r\n  // the addTodo function simply creates a new array that includes the user submitted todo item and then\r\n  // updates the state with the new list.\r\n  addTodo = (todo) => {\r\n    const exists = this.state.todos.find(t => t.content === todo.content);\r\n    if (exists){ return }\r\n\r\n    let new_list;\r\n    if(todo.date === null || todo.date === \"invalid date\"){\r\n      return;\r\n    }else{\r\n      todo.id = Math.random();\r\n      // Create a array that contains the current array and the new todo item\r\n      new_list = [...this.state.todos, todo];\r\n    }\r\n    // In React, keys or ids in a list help identify which items have changed, been added or removed. Keys\r\n    // should not share duplicate values.\r\n    // To avoid having dup values, we use the Math.random() function to generate a random value for a todo id.\r\n    // This solution works for a small application but a more complex hashing function should be used when\r\n    // dealing with a larger data sensitive project.\r\n\r\n    // Update the local state with the new array.\r\n    this.setState({\r\n      todos: new_list,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Home\">\r\n        <h1>Todo's </h1>\r\n        {/* When passing the AddTodo component, addTodo is a prop that is used in the\r\n        AddTodo.js file when handling the submit */}\r\n        <AddTodo addTodo={this.addTodo} />\r\n        {/* When returning the Todos component, todos is a prop passed to the todos.js file\r\n         to format and render the current todo list state */}\r\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAO,mBAAP;;;AAEA,MAAMC,IAAN,SAAmBH,SAAnB,CAA6B;EAC3B;EACAI,WAAW,GAAG;IACZ;;IADY,KASdC,UATc,GASAC,EAAD,IAAQ;MACnB;MACA;MACA,MAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWD,KAAX,CAAiBE,MAAjB,CAAyBC,IAAD,IAAU;QAC9C,OAAOA,IAAI,CAACJ,EAAL,KAAYA,EAAnB;MACD,CAFa,CAAd;MAGA,KAAKK,QAAL,CAAc;QACZJ,KAAK,EAAEA;MADK,CAAd;IAGD,CAlBa;;IAAA,KAsBdK,OAtBc,GAsBHF,IAAD,IAAU;MAClB,MAAMG,MAAM,GAAG,KAAKL,KAAL,CAAWD,KAAX,CAAiBO,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcN,IAAI,CAACM,OAA9C,CAAf;;MACA,IAAIH,MAAJ,EAAW;QAAE;MAAQ;;MAErB,IAAII,QAAJ;;MACA,IAAGP,IAAI,CAACQ,IAAL,KAAc,IAAd,IAAsBR,IAAI,CAACQ,IAAL,KAAc,cAAvC,EAAsD;QACpD;MACD,CAFD,MAEK;QACHR,IAAI,CAACJ,EAAL,GAAUa,IAAI,CAACC,MAAL,EAAV,CADG,CAEH;;QACAH,QAAQ,GAAG,CAAC,GAAG,KAAKT,KAAL,CAAWD,KAAf,EAAsBG,IAAtB,CAAX;MACD,CAXiB,CAYlB;MACA;MACA;MACA;MACA;MAEA;;;MACA,KAAKC,QAAL,CAAc;QACZJ,KAAK,EAAEU;MADK,CAAd;IAGD,CA5Ca;;IAEZ,KAAKT,KAAL,GAAa;MACXD,KAAK,EAAE;IADI,CAAb;EAGD,CAP0B,CAS3B;EACA;;;EAqCAc,MAAM,GAAG;IACP,oBACE;MAAK,SAAS,EAAC,MAAf;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAIE,QAAC,OAAD;QAAS,OAAO,EAAE,KAAKT;MAAvB;QAAA;QAAA;QAAA;MAAA,QAJF,eAOE,QAAC,KAAD;QAAO,KAAK,EAAE,KAAKJ,KAAL,CAAWD,KAAzB;QAAgC,UAAU,EAAE,KAAKF;MAAjD;QAAA;QAAA;QAAA;MAAA,QAPF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAWD;;AA3D0B;;AA8D7B,eAAeF,IAAf"},"metadata":{},"sourceType":"module"}