{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HATFIELDAE20\\\\IdeaProjects\\\\comp350sprint2\\\\src\\\\component\\\\AddTodo.js\";\nimport React, { Component } from \"react\";\nimport { Button, TextField } from \"@mui/material\";\nimport { DesktopDatePicker, LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { render, fireEvent } from \"@testing-library/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddTodo extends Component {\n  // Create a local react state of the this component with both content date property set to nothing.\n  constructor() {\n    super();\n\n    this.handleChange = event => {\n      this.setState({\n        content: event.target.value,\n        date: Date().toLocaleString('en-US')\n      });\n    };\n\n    this.handleDueDate = event => {\n      this.setState({\n        due: new Date(event).toLocaleString('en-US')\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n\n      if (this.state.content.trim()) {\n        this.props.addTodo(this.state);\n        this.setState({\n          content: \"\",\n          date: null\n        });\n      }\n    };\n\n    this.state = {\n      content: \"\",\n      date: \"\",\n      due: null\n    };\n  } // The handleChange function updates the react state with the new input value provided from the user and the current date/time.\n  // \"event\" is the defined action a user takes. In this case, the event is triggered when the user types something\n  // into the text field.\n\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // 1. When rendering a component, you can render as many elements as you like as long as it is wrapped inside\n      // one div element.\n      // 2. The return statement should include a text field input with the handleChange function from above that\n      // is passed into an onChange event.\n      // 3. The return should also include a button with the handleSubmit function from above that is passed into\n      // an OnClick event.\n      // 4. The value of the text field also should reflect the local state of this component.\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Add New Item\",\n          variant: \"outlined\",\n          onChange: this.handleChange,\n          value: this.state.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n          dateAdapter: AdapterDateFns,\n          children: /*#__PURE__*/_jsxDEV(DesktopDatePicker, {\n            onSubmit: this.due = null,\n            id: \"new-item-date\",\n            label: \"Due Date\",\n            value: this.state.due,\n            onChange: this.handleDueDate //should allow you to input due date\n            ,\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 38\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          \"data-testid\": \"new-item-button\",\n          style: {\n            marginLeft: \"10px\"\n          },\n          onClick: this.handleSubmit,\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}\n\nexport default AddTodo;","map":{"version":3,"names":["React","Component","Button","TextField","DesktopDatePicker","LocalizationProvider","AdapterDateFns","render","fireEvent","AddTodo","constructor","handleChange","event","setState","content","target","value","date","Date","toLocaleString","handleDueDate","due","handleSubmit","preventDefault","state","trim","props","addTodo","params","marginLeft"],"sources":["C:/Users/HATFIELDAE20/IdeaProjects/comp350sprint2/src/component/AddTodo.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, TextField } from \"@mui/material\";\r\nimport { DesktopDatePicker , LocalizationProvider} from '@mui/x-date-pickers';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { render, fireEvent } from \"@testing-library/react\";\r\n\r\n\r\nclass AddTodo extends Component {\r\n  // Create a local react state of the this component with both content date property set to nothing.\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      content: \"\",\r\n      date: \"\",\r\n      due: null,\r\n    };\r\n  }\r\n\r\n  // The handleChange function updates the react state with the new input value provided from the user and the current date/time.\r\n  // \"event\" is the defined action a user takes. In this case, the event is triggered when the user types something\r\n  // into the text field.\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      content: event.target.value,\r\n      date: Date().toLocaleString('en-US')\r\n    });\r\n  };\r\n\r\n  //\r\n  handleDueDate = (event) => {\r\n    this.setState({\r\n\r\n      due: new Date(event).toLocaleString('en-US')\r\n\r\n    });\r\n  };\r\n\r\n  // The handleSubmit function collects the forms input and puts it into the react state.\r\n  // event.preventDefault() is called to prevents default event behavior like refreshing the browser.\r\n  // this.props.addTodo(this.state) passes the current state (or user input and current date/time) into the addTodo function defined\r\n  // in the Home.js file which then adds the input into the list.\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (this.state.content.trim()) {\r\n      this.props.addTodo(this.state);\r\n      this.setState({\r\n        content: \"\",\r\n        date: null\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      // 1. When rendering a component, you can render as many elements as you like as long as it is wrapped inside\r\n      // one div element.\r\n      // 2. The return statement should include a text field input with the handleChange function from above that\r\n      // is passed into an onChange event.\r\n      // 3. The return should also include a button with the handleSubmit function from above that is passed into\r\n      // an OnClick event.\r\n      // 4. The value of the text field also should reflect the local state of this component.\r\n      <div>\r\n        <TextField\r\n          label=\"Add New Item\"\r\n          variant=\"outlined\"\r\n          onChange={this.handleChange}\r\n          value={this.state.content}\r\n        />\r\n\r\n  <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n       <DesktopDatePicker\r\n            onSubmit = {this.due = null}\r\n            id=\"new-item-date\"\r\n            label=\"Due Date\"\r\n            value={this.state.due}\r\n            onChange={this.handleDueDate} //should allow you to input due date\r\n            renderInput={(params) => <TextField {...params} />}\r\n        />\r\n    </LocalizationProvider>\r\n\r\n        <Button data-testid = \"new-item-button\"\r\n          style={{ marginLeft: \"10px\" }}\r\n          onClick={this.handleSubmit}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Add\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,eAAlC;AACA,SAASC,iBAAT,EAA6BC,oBAA7B,QAAwD,qBAAxD;AACA,SAASC,cAAT,QAA+B,oCAA/B;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,wBAAlC;;;AAGA,MAAMC,OAAN,SAAsBR,SAAtB,CAAgC;EAC9B;EACAS,WAAW,GAAG;IACZ;;IADY,KAYdC,YAZc,GAYEC,KAAD,IAAW;MACxB,KAAKC,QAAL,CAAc;QACZC,OAAO,EAAEF,KAAK,CAACG,MAAN,CAAaC,KADV;QAEZC,IAAI,EAAEC,IAAI,GAAGC,cAAP,CAAsB,OAAtB;MAFM,CAAd;IAID,CAjBa;;IAAA,KAoBdC,aApBc,GAoBGR,KAAD,IAAW;MACzB,KAAKC,QAAL,CAAc;QAEZQ,GAAG,EAAE,IAAIH,IAAJ,CAASN,KAAT,EAAgBO,cAAhB,CAA+B,OAA/B;MAFO,CAAd;IAKD,CA1Ba;;IAAA,KAgCdG,YAhCc,GAgCEV,KAAD,IAAW;MACxBA,KAAK,CAACW,cAAN;;MACA,IAAI,KAAKC,KAAL,CAAWV,OAAX,CAAmBW,IAAnB,EAAJ,EAA+B;QAC7B,KAAKC,KAAL,CAAWC,OAAX,CAAmB,KAAKH,KAAxB;QACA,KAAKX,QAAL,CAAc;UACZC,OAAO,EAAE,EADG;UAEZG,IAAI,EAAE;QAFM,CAAd;MAID;IACF,CAzCa;;IAEZ,KAAKO,KAAL,GAAa;MACXV,OAAO,EAAE,EADE;MAEXG,IAAI,EAAE,EAFK;MAGXI,GAAG,EAAE;IAHM,CAAb;EAKD,CAT6B,CAW9B;EACA;EACA;;;EAgCAd,MAAM,GAAG;IACP;MAAA;MACE;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QAAA,wBACE,QAAC,SAAD;UACE,KAAK,EAAC,cADR;UAEE,OAAO,EAAC,UAFV;UAGE,QAAQ,EAAE,KAAKI,YAHjB;UAIE,KAAK,EAAE,KAAKa,KAAL,CAAWV;QAJpB;UAAA;UAAA;UAAA;QAAA,QADF,eAQJ,QAAC,oBAAD;UAAsB,WAAW,EAAER,cAAnC;UAAA,uBACK,QAAC,iBAAD;YACK,QAAQ,EAAI,KAAKe,GAAL,GAAW,IAD5B;YAEK,EAAE,EAAC,eAFR;YAGK,KAAK,EAAC,UAHX;YAIK,KAAK,EAAE,KAAKG,KAAL,CAAWH,GAJvB;YAKK,QAAQ,EAAE,KAAKD,aALpB,CAKmC;YALnC;YAMK,WAAW,EAAGQ,MAAD,iBAAY,QAAC,SAAD,OAAeA;YAAf;cAAA;cAAA;cAAA;YAAA;UAN9B;YAAA;YAAA;YAAA;UAAA;QADL;UAAA;UAAA;UAAA;QAAA,QARI,eAmBE,QAAC,MAAD;UAAQ,eAAc,iBAAtB;UACE,KAAK,EAAE;YAAEC,UAAU,EAAE;UAAd,CADT;UAEE,OAAO,EAAE,KAAKP,YAFhB;UAGE,OAAO,EAAC,WAHV;UAIE,KAAK,EAAC,SAJR;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAnBF;MAAA;QAAA;QAAA;QAAA;MAAA;IARF;EAqCD;;AAnF6B;;AAsFhC,eAAeb,OAAf"},"metadata":{},"sourceType":"module"}