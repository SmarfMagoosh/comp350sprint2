{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HATFIELDAE20\\\\IdeaProjects\\\\comp350sprint2\\\\src\\\\component\\\\todos.js\";\nimport React from \"react\";\nimport \"../component/todos.css\";\nimport { Card, Grid, ListItemButton, ListItemText, Checkbox } from \"@mui/material\";\n\n// 1. This component formats and returns the list of todos.\n// 2. Treat the question mark like an if statement.\n// If the todos array has items in the list [todos.length], we want to return the list\n// Else, return a message saying \"You have no todo's left\"\n// 3. The map function is called to assign each array item with a key\n// 4. Think of lines 14-23 as a loop. For each todo in the todo list, we want to give the list item\n// a key, and it's own card shown in the UI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Todos = _ref => {\n  let {\n    todos,\n    deleteTodo\n  } = _ref;\n  const todoList = todos.length ? todos.map(todo => {\n    let color = \"white\";\n    if (new Date(todo.due) < new Date()) {\n      color = \"red\";\n    }\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          marginTop: 10,\n          background: color\n        },\n        \"data-testid\": todo.content,\n        children: [\".\", /*#__PURE__*/_jsxDEV(ListItemButton, {\n          component: \"a\",\n          href: \"#simple-list\",\n          children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n            style: {\n              paddingLeft: 0\n            },\n            color: \"primary\",\n            onClick: () => deleteTodo(todo.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: todo.content,\n            secondary: todo.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this)\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this);\n  }) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"You have no todo's left \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n  // Lastly, return the todoList constant that we created above to show all of the items on the screen.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoCollection\",\n    style: {\n      padding: \"10px\"\n    },\n    children: todoList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_c = Todos;\nexport default Todos;\nvar _c;\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"names":["React","Card","Grid","ListItemButton","ListItemText","Checkbox","jsxDEV","_jsxDEV","Todos","_ref","todos","deleteTodo","todoList","length","map","todo","color","Date","due","children","style","marginTop","background","content","component","href","paddingLeft","onClick","id","fileName","_jsxFileName","lineNumber","columnNumber","primary","secondary","date","className","padding","_c","$RefreshReg$"],"sources":["C:/Users/HATFIELDAE20/IdeaProjects/comp350sprint2/src/component/todos.js"],"sourcesContent":["import React from \"react\";\r\nimport \"../component/todos.css\";\r\nimport { Card, Grid, ListItemButton, ListItemText, Checkbox} from \"@mui/material\";\r\n\r\n// 1. This component formats and returns the list of todos.\r\n// 2. Treat the question mark like an if statement.\r\n// If the todos array has items in the list [todos.length], we want to return the list\r\n// Else, return a message saying \"You have no todo's left\"\r\n// 3. The map function is called to assign each array item with a key\r\n// 4. Think of lines 14-23 as a loop. For each todo in the todo list, we want to give the list item\r\n// a key, and it's own card shown in the UI\r\nconst Todos = ({ todos, deleteTodo }) => {\r\n  const todoList = todos.length ? (\r\n    todos.map((todo) => {\r\n      let color = \"white\"\r\n      if(new Date(todo.due) < new Date()){\r\n        color = \"red\"\r\n      }\r\n      return (\r\n        <Grid key={todo.id}>\r\n          <Card style={{marginTop:10, background: color}} data-testid={todo.content}>\r\n            {\r\n\r\n            /* Remember, we set the local state of this todo item when the user submits the form in\r\n            AddTodo.js. All we need to do is return the todo list item {todo.content} as well as its\r\n            current date/time {todo.date}. Also, the item's id is utilized in order to correctly delete an item from the Todo list*/}.\r\n            <ListItemButton component=\"a\" href=\"#simple-list\">\r\n              <Checkbox style={{paddingLeft:0}} color=\"primary\" onClick={() => deleteTodo(todo.id)}/>\r\n              <ListItemText primary={todo.content} secondary={todo.date}/>\r\n            </ListItemButton>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    })\r\n  ) : (\r\n    <p>You have no todo's left </p>\r\n  );\r\n  // Lastly, return the todoList constant that we created above to show all of the items on the screen.\r\n  return (\r\n    <div className=\"todoCollection\" style={{ padding: \"10px\" }}>\r\n      {todoList}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todos;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,wBAAwB;AAC/B,SAASC,IAAI,EAAEC,IAAI,EAAEC,cAAc,EAAEC,YAAY,EAAEC,QAAQ,QAAO,eAAe;;AAEjF;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,KAAK,GAAGC,IAAA,IAA2B;EAAA,IAA1B;IAAEC,KAAK;IAAEC;EAAW,CAAC,GAAAF,IAAA;EAClC,MAAMG,QAAQ,GAAGF,KAAK,CAACG,MAAM,GAC3BH,KAAK,CAACI,GAAG,CAAEC,IAAI,IAAK;IAClB,IAAIC,KAAK,GAAG,OAAO;IACnB,IAAG,IAAIC,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,GAAG,IAAID,IAAI,EAAE,EAAC;MACjCD,KAAK,GAAG,KAAK;IACf;IACA,oBACET,OAAA,CAACL,IAAI;MAAAiB,QAAA,eACHZ,OAAA,CAACN,IAAI;QAACmB,KAAK,EAAE;UAACC,SAAS,EAAC,EAAE;UAAEC,UAAU,EAAEN;QAAK,CAAE;QAAC,eAAaD,IAAI,CAACQ,OAAQ;QAAAJ,QAAA,GAKiD,GACzH,eAAAZ,OAAA,CAACJ,cAAc;UAACqB,SAAS,EAAC,GAAG;UAACC,IAAI,EAAC,cAAc;UAAAN,QAAA,gBAC/CZ,OAAA,CAACF,QAAQ;YAACe,KAAK,EAAE;cAACM,WAAW,EAAC;YAAC,CAAE;YAACV,KAAK,EAAC,SAAS;YAACW,OAAO,EAAEA,CAAA,KAAMhB,UAAU,CAACI,IAAI,CAACa,EAAE;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAE,eACvFzB,OAAA,CAACH,YAAY;YAAC6B,OAAO,EAAElB,IAAI,CAACQ,OAAQ;YAACW,SAAS,EAAEnB,IAAI,CAACoB;UAAK;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAE;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAC7C;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACZ,GAXEjB,IAAI,CAACa,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAYX;EAEX,CAAC,CAAC,gBAEFzB,OAAA;IAAAY,QAAA,EAAG;EAAwB;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC5B;EACD;EACA,oBACEzB,OAAA;IAAK6B,SAAS,EAAC,gBAAgB;IAAChB,KAAK,EAAE;MAAEiB,OAAO,EAAE;IAAO,CAAE;IAAAlB,QAAA,EACxDP;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACL;AAEV,CAAC;AAACM,EAAA,GAhCI9B,KAAK;AAkCX,eAAeA,KAAK;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}