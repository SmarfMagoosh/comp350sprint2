{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HATFIELDAE20\\\\IdeaProjects\\\\comp350sprint2\\\\src\\\\pages\\\\Home.js\";\nimport React, { Component } from \"react\";\nimport Todos from \"../component/todos\";\nimport AddTodo from \"../component/AddTodo\";\nimport \"../pages/Home.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Home extends Component {\n  // Create a default state of this component with an empty list of todos.\n  constructor() {\n    super();\n    // the deleteTodo function simply creates a new array that removes the todo item selected from the user from the list\n    // and then updates the state with the new list.\n    this.deleteTodo = id => {\n      // Within this function, the item's id is being utilized in order to filter it out from the todo list\n      // and then updates the state with a new list\n      const todos = this.state.todos.filter(todo => {\n        return todo.id !== id;\n      });\n      this.setState({\n        todos: todos\n      });\n    };\n    // the addTodo function simply creates a new array that includes the user submitted todo item and then\n    // updates the state with the new list.\n    this.addTodo = todo => {\n      const exists = this.state.todos.find(t => t.content === todo.content);\n      if (exists) {\n        return;\n      }\n      let new_list;\n      if (todo.date === null || todo.date === \"invalid date\") {\n        return;\n      } else {\n        todo.id = Math.random();\n        // Create a array that contains the current array and the new todo item\n        new_list = [...this.state.todos, todo];\n      }\n      // In React, keys or ids in a list help identify which items have changed, been added or removed. Keys\n      // should not share duplicate values.\n      // To avoid having dup values, we use the Math.random() function to generate a random value for a todo id.\n      // This solution works for a small application but a more complex hashing function should be used when\n      // dealing with a larger data sensitive project.\n\n      // Update the local state with the new array.\n      this.setState({\n        todos: new_list\n      });\n    };\n    this.state = {\n      todos: []\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Home\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Todo's \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddTodo, {\n        addTodo: this.addTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Todos, {\n        todos: this.state.todos,\n        deleteTodo: this.deleteTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Home;","map":{"version":3,"names":["React","Component","Todos","AddTodo","jsxDEV","_jsxDEV","Home","constructor","deleteTodo","id","todos","state","filter","todo","setState","addTodo","exists","find","t","content","new_list","date","Math","random","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/HATFIELDAE20/IdeaProjects/comp350sprint2/src/pages/Home.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport Todos from \"../component/todos\";\r\nimport AddTodo from \"../component/AddTodo\";\r\nimport \"../pages/Home.css\";\r\n\r\nclass Home extends Component {\r\n  // Create a default state of this component with an empty list of todos.\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      todos: [],\r\n    };\r\n  }\r\n\r\n  // the deleteTodo function simply creates a new array that removes the todo item selected from the user from the list\r\n  // and then updates the state with the new list.\r\n  deleteTodo = (id) => {\r\n    // Within this function, the item's id is being utilized in order to filter it out from the todo list\r\n    // and then updates the state with a new list\r\n    const todos = this.state.todos.filter((todo) => {\r\n      return todo.id !== id;\r\n    });\r\n    this.setState({\r\n      todos: todos,\r\n    });\r\n  };\r\n\r\n  // the addTodo function simply creates a new array that includes the user submitted todo item and then\r\n  // updates the state with the new list.\r\n  addTodo = (todo) => {\r\n    const exists = this.state.todos.find(t => t.content === todo.content);\r\n    if (exists){ return }\r\n\r\n    let new_list;\r\n    if(todo.date === null || todo.date === \"invalid date\"){\r\n      return;\r\n    }else{\r\n      todo.id = Math.random();\r\n      // Create a array that contains the current array and the new todo item\r\n      new_list = [...this.state.todos, todo];\r\n    }\r\n    // In React, keys or ids in a list help identify which items have changed, been added or removed. Keys\r\n    // should not share duplicate values.\r\n    // To avoid having dup values, we use the Math.random() function to generate a random value for a todo id.\r\n    // This solution works for a small application but a more complex hashing function should be used when\r\n    // dealing with a larger data sensitive project.\r\n\r\n    // Update the local state with the new array.\r\n    this.setState({\r\n      todos: new_list,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Home\">\r\n        <h1>Todo's </h1>\r\n        {/* When passing the AddTodo component, addTodo is a prop that is used in the\r\n        AddTodo.js file when handling the submit */}\r\n        <AddTodo addTodo={this.addTodo} />\r\n        {/* When returning the Todos component, todos is a prop passed to the todos.js file\r\n         to format and render the current todo list state */}\r\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,IAAI,SAASL,SAAS,CAAC;EAC3B;EACAM,WAAWA,CAAA,EAAG;IACZ,KAAK,EAAE;IAMT;IACA;IAAA,KACAC,UAAU,GAAIC,EAAE,IAAK;MACnB;MACA;MACA,MAAMC,KAAK,GAAG,IAAI,CAACC,KAAK,CAACD,KAAK,CAACE,MAAM,CAAEC,IAAI,IAAK;QAC9C,OAAOA,IAAI,CAACJ,EAAE,KAAKA,EAAE;MACvB,CAAC,CAAC;MACF,IAAI,CAACK,QAAQ,CAAC;QACZJ,KAAK,EAAEA;MACT,CAAC,CAAC;IACJ,CAAC;IAED;IACA;IAAA,KACAK,OAAO,GAAIF,IAAI,IAAK;MAClB,MAAMG,MAAM,GAAG,IAAI,CAACL,KAAK,CAACD,KAAK,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,KAAKN,IAAI,CAACM,OAAO,CAAC;MACrE,IAAIH,MAAM,EAAC;QAAE;MAAO;MAEpB,IAAII,QAAQ;MACZ,IAAGP,IAAI,CAACQ,IAAI,KAAK,IAAI,IAAIR,IAAI,CAACQ,IAAI,KAAK,cAAc,EAAC;QACpD;MACF,CAAC,MAAI;QACHR,IAAI,CAACJ,EAAE,GAAGa,IAAI,CAACC,MAAM,EAAE;QACvB;QACAH,QAAQ,GAAG,CAAC,GAAG,IAAI,CAACT,KAAK,CAACD,KAAK,EAAEG,IAAI,CAAC;MACxC;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA,IAAI,CAACC,QAAQ,CAAC;QACZJ,KAAK,EAAEU;MACT,CAAC,CAAC;IACJ,CAAC;IA1CC,IAAI,CAACT,KAAK,GAAG;MACXD,KAAK,EAAE;IACT,CAAC;EACH;EAwCAc,MAAMA,CAAA,EAAG;IACP,oBACEnB,OAAA;MAAKoB,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnBrB,OAAA;QAAAqB,QAAA,EAAI;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAGhBzB,OAAA,CAACF,OAAO;QAACY,OAAO,EAAE,IAAI,CAACA;MAAQ;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eAGlCzB,OAAA,CAACH,KAAK;QAACQ,KAAK,EAAE,IAAI,CAACC,KAAK,CAACD,KAAM;QAACF,UAAU,EAAE,IAAI,CAACA;MAAW;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC3D;EAEV;AACF;AAEA,eAAexB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}